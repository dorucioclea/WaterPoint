using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using WaterPoint.Core.Domain.Db;
using WaterPoint.Data.Entity;
using WaterPoint.Data.Entity.Attributes;

namespace WaterPoint.Core.Bll
{
    public class CreateSqlBuilder<T> : SqlBuilder<T>, ICreateSqlBuilder
           where T : IDataEntity
    {
        private string _values = string.Empty;

        public Dictionary<string, object> Parameters { get; private set; }

        private readonly IEnumerable<PropertyInfo> _propertyInfos;

        private List<PropertyInfo> _columns;

        public CreateSqlBuilder()
        {
            _propertyInfos = GetProperties(Type);
        }

        public string GetSql()
        {
            Columns = string.Join(",\r\n", _columns.Select(i => $"{ParentTable}.[{i.Name}]"));

            var sql =
                $@"INSERT INTO {SqlPatterns.FromTable}
                    ({SqlPatterns.Columns})
                VALUES
                    ({SqlPatterns.Values})
                SELECT SCOPE_IDENTITY()";

            return sql
                .Replace(SqlPatterns.FromTable, ParentTable)
                .Replace(SqlPatterns.Columns, Columns)
                .Replace(SqlPatterns.Values, _values);
        }

        public void Analyze<TParam>() where TParam : IQueryParameter
        {
            var inputProperties = typeof(TParam).GetProperties().ToArray();

            _columns =
                _propertyInfos
                    .Where(i =>
                        !SqlBuilderHelper.ShouldIgnore(i, IgnoreTypes)
                        &&
                        inputProperties
                            .FirstOrDefault(inputPro => string.Equals(inputPro.Name, i.Name, StringComparison.CurrentCultureIgnoreCase)) != null
                    ).ToList();
        }

        public void AddValueParameters(IQueryParameter input)
        {
            var inputProperties = input.GetType().GetProperties().ToArray();

            if (Parameters == null)
                Parameters = new Dictionary<string, object>();

            foreach (var propertyInfo in _propertyInfos)
            {
                var inputPro = inputProperties.FirstOrDefault(i => string.Equals(i.Name, propertyInfo.Name, StringComparison.CurrentCultureIgnoreCase));

                if (inputPro == null)
                    continue;

                var value = inputPro.GetValue(input, null);

                if (value == null)
                {
                    var toremove = _columns.FirstOrDefault(i => string.Equals(i.Name, inputPro.Name, StringComparison.CurrentCultureIgnoreCase));

                    if (toremove != null)
                        _columns.Remove(toremove);

                    continue;
                }

                var name = propertyInfo.Name.ToLower();

                Parameters.Add(name, value);
            }

            _values = string.Join(",", Parameters.Select(i => $"@{i.Key.ToLower()}"));
        }

        private static IEnumerable<PropertyInfo> GetProperties(Type type)
        {
            var properties = type.GetProperties().Where(i => !i.CustomAttributes.Any(c =>
                c.AttributeType.Name == typeof(AutoGeneratedAttribute).Name ||
                c.AttributeType.Name == typeof(PrimaryAttribute).Name));

            return properties;
        }

        private IEnumerable<Type> IgnoreTypes
        {
            get
            {
                return new[]
                {
                    typeof (PrimaryAttribute),
                    typeof (ManyToManyAttribute),
                    typeof (OneToManyAttribute),
                    typeof (ComputedAttribute),
                    typeof (TableAttribute)
                };
            }
        }
    }
}
