using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using WaterPoint.Core.Domain;
using WaterPoint.Data.Entity;
using WaterPoint.Data.Entity.Attributes;

namespace WaterPoint.Core.Bll
{
    public class CreateSqlBuilder<T> : SqlBuilder<T>, ICreateSqlBuilder
           where T : IDataEntity
    {
        private string _values = string.Empty;

        public Dictionary<string, object> Parameters { get; private set; }

        private readonly IEnumerable<PropertyInfo> _propertyInfos;

        public CreateSqlBuilder()
        {
            _propertyInfos = GetProperties(Type);
        }

        public string GetSql()
        {
            var sql = string.Format(@"

                INSERT INTO {0}
                ({1})
                VALUES
                ({2})
                SELECT SCOPE_IDENTITY()",
                SqlPatterns.FromTable, SqlPatterns.Columns, SqlPatterns.Values);

            return sql
                .Replace(SqlPatterns.FromTable, ParentTable)
                .Replace(SqlPatterns.Columns, Columns)
                .Replace(SqlPatterns.Values, _values);
        }

        public void Analyze()
        {
            Columns = string.Join(",\r\n", _propertyInfos.Select(i => string.Format("{0}.[{1}]", ParentTable, i.Name)));
        }

        public void AddValueParameters(IDataEntity input)
        {
            if (Parameters == null)
                Parameters = new Dictionary<string, object>();

            foreach (var propertyInfo in _propertyInfos)
            {
                var value = propertyInfo.GetValue(input, null);

                var name = propertyInfo.Name.ToLower();

                Parameters.Add(name, value);
            }

            _values = string.Join(",", _propertyInfos.Select(i => string.Format("@{0}", i.Name.ToLower())));
        }

        public static IEnumerable<PropertyInfo> GetProperties(Type type)
        {
            var properties = type.GetProperties().Where(i => !i.CustomAttributes.Any(c =>
                c.AttributeType.Name == typeof(AutoGeneratedAttribute).Name ||
                c.AttributeType.Name == typeof(PrimaryAttribute).Name));

            return properties;
        }
    }
}
